@page
@model Domotica.Core.Pages.IndexModel
@{
    ViewData["Title"] = "Control hosting page";

    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

        <title>SwitchRange Control</title>

        <link href="lib/metro-ui/css/metro-all.css" rel="stylesheet" />
        <link href="css/site.css" rel="stylesheet" />

        <script src="lib/signalr/signalr.min.js"></script>
    </head>
    <body class="bg-cyan">
        <!-- With icon (font) -->
        <div class="container bg-cyan fg-white">
            <div class="row">
                <div class="cell">
                    <div class="heading">
                        <span class="icon mif-switch mif-lg" id="switchStatusIcon"></span>
                        <strong><span class="title" id="BrightnessInTitle">Device - Brightness: 0%</span></strong>
                    </div>                
                </div>
                <div class="cell text-right">
                    <input 
                    id="MainSwitch"
                    type="checkbox" 
                    data-role="switch" 
                    data-caption="On/Off" 
                    data-cls-caption="fg-white text-bold" 
                    data-caption-position="left"
                    onclick="onMainSwitchClick(this)">
                </div>
            </div>
            <div class="row">
                <div class="cell">
                    <input diabled
                    data-role="slider" 
                    id="deviceBrightness"
                    data-hint="true" 
                    data-hint-always="false" 
                    data-hint-position="top"
                    data-show-min-max="true"
                    data-cls-backside="bg-grayMouse"
                    data-cls-marker="bg-yellow border-50 custom-marker"
                    data-cls-hint="bg-green custom-marker shadow-2"
                    data-cls-complete="bg-green"
                    data-cls-min-max="bg-cyan fg-white p-2 mb-3-minus">
                </div>
            </div>
        </div>

        <!--Add script to update the page and send messages.-->
        <script src="lib/metro-ui/js/metro.js"></script>
        <script type="text/javascript">
            var device = {
                "DeviceId": "TIxnxU38dzkm",
                "Name": "RGB Led Stripe",
                "NameId": "RGBLedStripe",
                "Params": {
                    "Command": "p 4 0 p 14 0 p 3 0",
                    "LastValue": 100,
                    "Color": {
                        "Brightness": 0
                    }
                }
            };
           
            // connect to SignalR hub
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/hubs/device")
                .build();

            connection.start()
                .then(() => connection.invoke("getDeviceStatusInitial", JSON.stringify(device))
                .catch(err => console.error(err.toString())));

            connection.on('deviceStatusReceived', (status) => {
                // The second is taking the actual device status
                device = JSON.parse(status);
                UpdateState(device);
            });

            connection.on('deviceStatusInitial', (status) => {
                if (status) {
                    // The first client reading the device status gets here inside
                    device = JSON.parse(status);
                    UpdateState(device);
                }
            });

            UpdateState = function (device) {
                SwitchState();

                var strBrightnessInTile = "{0} - Brightness: {1}%";
                strBrightnessInTile = strBrightnessInTile.replace("{0}", device.Name);
                strBrightnessInTile = strBrightnessInTile.replace("{1}", device.Params.Color.Brightness.toFixed(2));

                $("#BrightnessInTitle").text(strBrightnessInTile);
                $("#deviceBrightness").attr("data-value", device.Params.Color.Brightness);
            };            
            
            SwitchState = function () {
                $("#deviceBrightness").val() > 0
                    ? $("#switchStatusIcon").css("color", "yellow")
                    : $("#switchStatusIcon").css("color", "red");
                   
                $("#deviceBrightness").val() > 0
                    ? document.getElementById("MainSwitch").checked = true
                    : document.getElementById("MainSwitch").checked = false;
            };   

            function onMainSwitchClick(cb) { 
                // save last brightness state
                if(device.Params.Color.Brightness > 0) device.Params.LastValue = device.Params.Color.Brightness;

                if(cb.checked) device.Params.Color.Brightness = device.Params.LastValue;
                else device.Params.Color.Brightness = 0;

                DeviceStatusSend(device);
            }

            UpdateColor = function (valuePwm) {
                // the color value is ranging from 0 to 255
                valuePwm = Math.round(valuePwm * 2.55);
                device.Params.Command = "p 4 " + valuePwm + " " + "p 14 " + valuePwm + " " + "p 3 " + valuePwm;
            }

            function DeviceStatusSend() {
                if (device.Params.Color.Brightness !== 0) {
                    UpdateColor(device.Params.Color.Brightness);
                } else {
                    UpdateColor(0);
                }

                connection.invoke("deviceStatusSend", JSON.stringify(device))
                    .catch(err => console.error(err.toString()));

                connection.invoke("sendCommand", JSON.stringify(device))
                    .catch(err => console.error(err.toString()));

                UpdateState(device);
            }

            $(document).ready(function () {
                setInterval(SwitchState, 250);
                $("#deviceBrightness").removeAttr('disabled');

                $("#deviceBrightness").on("start stop move", function(){
                    device.Params.Color.Brightness = Math.round(this.value);                       
                    DeviceStatusSend();
                });
            });
        </script>
    </body>
}

