@page
@model Domotica.Core.Pages.IndexModel
@{
    ViewData["Title"] = "Control hosting page";

    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

        <title>SwitchRange Control</title>

        <link href="lib/metro-ui/css/metro-all.css" rel="stylesheet" />
        <link href="css/site.css" rel="stylesheet" />

        <script src="lib/signalr/signalr.min.js"></script>
    </head>
    <body class="bg-cyan">
        <!-- With icon (font) -->
        <div class="container bg-cyan fg-white">
            <div class="heading">
                <span class="icon mif-switch mif-lg" id="switchIcon"></span>
                <strong><span class="title" id="BrightnessInTitle">Device - Brightness: 0%</span></strong>
            </div>
            <div class="row">
                <div class="cell">
                    <input 
                    diabled
                    data-role="slider" 
                    id="deviceBrightness"
                    data-hint="true" 
                    data-hint-always="false" 
                    data-hint-position="top"
                    data-show-min-max="true"
                    data-cls-backside="bg-grayMouse"
                    data-cls-marker="bg-yellow border-50 custom-marker"
                    data-cls-hint="bg-green custom-marker shadow-2"
                    data-cls-complete="bg-green"
                    data-cls-min-max="bg-cyan fg-white p-2 mb-3-minus">
                </div>
            </div>
        </div>

        <!--Add script to update the page and send messages.-->
        <script src="lib/metro-ui/js/metro.js"></script>
        <script type="text/javascript">
            var device = {
                "Name": "Device",
                "LedRGBStripe": {
                    "Brightness": 0,
                    "Color": {
                        "R": 0,
                        "G": 0,
                        "B": 0
                    }
                }
            };
           
            // connect to SignalR hub
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/hubs/device")
                .build();

            connection.start()
                .then(() => connection.invoke("getDeviceStatusInitial", JSON.stringify(device))
                .catch(err => console.error(err.toString())));

            connection.on('deviceStatusReceived', (status) => {
                // The second is taking the actual device status
                device = JSON.parse(status);
                UpdateState(device);
            });

            connection.on('deviceStatusInitial', (status) => {
                if (status) {
                    // The first client reading the device status gets here inside
                    device = JSON.parse(status);
                    UpdateState(device);
                }
            });

            UpdateState = function (device) {
                SwitchState();

                var strBrightnessInTile = "{0} - Brightness: {1}%";
                strBrightnessInTile = strBrightnessInTile.replace("{0}", device.Name);
                strBrightnessInTile = strBrightnessInTile.replace("{1}", device.LedRGBStripe.Brightness);

                $("#BrightnessInTitle").text(strBrightnessInTile);
                $("#deviceBrightness").attr("data-value", device.LedRGBStripe.Brightness);
            };            
            
            SwitchState = function () {
                $("#deviceBrightness").val() === "0"
                    ? $("#switchIcon").css("color", "red")
                    : $("#switchIcon").css("color", "yellow");
            };   

            $(document).ready(function () {
                setInterval(SwitchState, 250);
                $("#deviceBrightness").removeAttr('disabled');

                $("#deviceBrightness").on("start stop move", function(){
                    device.LedRGBStripe.Brightness = Math.round(this.value);                       
                    connection.invoke("deviceStatusSend", JSON.stringify(device)).catch(err => console.error(err.toString()));

                    // the slider value is ranging from 0 to 255 -> this is why we multiply with 2.55
                    var valuePwm = Math.round(device.LedRGBStripe.Brightness * 2.55);
                    device.LedRGBStripe.Color.R = valuePwm;
                    device.LedRGBStripe.Color.G = valuePwm;
                    device.LedRGBStripe.Color.B = valuePwm;

                    device.LedRGBStripe.Brightness === "0" 
                        ? connection.invoke("sendCommand", "p 4 0 p 14 0 p 3 0").catch(err => console.error(err.toString()))
                        : connection.invoke("sendCommand", "p 4 " + valuePwm + " " + "p 14 " + valuePwm + " " + "p 3 " + valuePwm)
                        .catch(err => console.error(err.toString()));

                    UpdateState(device);
                });
            });
        </script>
    </body>
}

