@page
@model IndexModel
@{
    ViewData["Title"] = "Control hosting page";

    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

        <title>SwitchRange Control</title>

        <link href="lib/metro-ui/css/metro.css" rel="stylesheet" />
        <link href="lib/metro-ui/css/metro-icons.css" rel="stylesheet" />
        <link href="lib/metro-ui/css/metro-components.css" rel="stylesheet" />
        <link href="lib/metro-ui/css/schemes/sky-net.css" rel="stylesheet" />

        <script src="lib/signalr/signalr.min.js"></script>
    </head>
    <body>
        <!-- With icon (font) -->
        <div class="container">
            <div class="heading">
                <span class="icon mif-switch" id="switchicon" style="color: red;"></span>
                <span class="title" id="BrightnessInTitle">Main Light - Brightness: 0%</span>
            </div>
            <div class="row">
                <div class="cell colspan12">
                    <input 
                    diabled
                    data-role="slider" 
                    id="deviceBrightness"
                    data-hint="true" 
                    data-hint-always="false" 
                    data-hint-position="bottom"
                    data-show-min-max="true"
                    data-cls-backside="bg-dark"
                    data-cls-marker="bg-red border-50 custom-marker"
                    data-cls-hint="bg-cyan custom-marker shadow-2"
                    data-cls-complete="bg-green"
                    data-cls-min-max="bg-cyan fg-white p-2 mb-3-minus">
                </div>
            </div>
        </div>

        <!--Add script to update the page and send messages.-->
        <script src="lib/metro-ui/js/metro.js"></script>
        <script type="text/javascript">
            var deviceStatus = {
                "LedRGBStripe": {
                    "Brightness": "0",
                    "Color": {
                        "R": "0",
                        "G": "0",
                        "B": "0"
                    }
                }
            };
           
            // connect to SignalR hub
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/hubs/device")
                .build();

            connection.start()
                .then(() => connection.invoke("getDeviceStatusInitial"))
                .catch(err => console.error(err.toString()));

            UpdateState = function (deviceStatus) {
                var strBrightnessInTile = "Main Light - Brightness: {0}%";

                $("#deviceBrightness").val() === "0"
                    ? $("#switchicon").css("color", "red")
                    : $("#switchicon").css("color", "green");

                $("#deviceBrightness").val(deviceStatus.LedRGBStripe.Brightness)
                $("#BrightnessInTitle").text(strBrightnessInTile.replace("{0}", deviceStatus.LedRGBStripe.Brightness));
            };

            connection.on('deviceStatusReceived', (status) => {
                // The second is taking the actual device status
                deviceStatus = JSON.parse(status);
                $("#deviceBrightness").val(deviceStatus.LedRGBStripe.Brightness);
                UpdateState(deviceStatus);
            });

            connection.on('deviceStatusInitial', (status) => {
                if (status) {
                    // The first client reading the device status gets here inside
                    deviceStatus = JSON.parse(status);
                }
                $("#deviceBrightness").val(deviceStatus.LedRGBStripe.Brightness);
                UpdateState(deviceStatus);
            });

            $(document).ready(function () {
                $("#deviceBrightness").removeAttr('disabled');

                $("#deviceBrightness").on("change", function(){
                    deviceStatus.LedRGBStripe.Brightness = Math.round(this.value);
                    connection.invoke("deviceStatusSend", JSON.stringify(deviceStatus)).catch(err => console.error(err.toString()));

                    // the slider value is ranging from 0 to 255 -> this is why we multiply with 2.55
                    var valuePwm = Math.round(deviceStatus.LedRGBStripe.Brightness * 2.55);

                    $('#deviceBrightness').val() === "0" 
                        ? connection.invoke("sendCommand", "p 4 0 p 14 0 p 3 0").catch(err => console.error(err.toString()))
                        : connection.invoke("sendCommand", "p 4 " + valuePwm + " " + "p 14 " + valuePwm + " " + "p 3 " + valuePwm)
                        .catch(err => console.error(err.toString()));
                    UpdateState(deviceStatus);
                });
            });
        </script>
    </body>
}

