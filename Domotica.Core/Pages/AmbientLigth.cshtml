@page
@model Domotica.Core.Pages.AmbientLightModel
@{
    ViewData["Title"] = "Control hosting page";

    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

        <title>Ambient Light Control</title>

        <link href="lib/metro-ui/css/metro-colors.css" rel="stylesheet" />
        <link href="css/site.css" rel="stylesheet" />
      
        <style>
            #picker {padding-top: 24px; text-align: center;}
            #picker div{display: inline-block;}
            #picker input{width: 400px; border: 1px solid lightgrey; background-color: white;}
        </style>

        <script src="lib/jquery/jquery.slim.min.js"></script> 
        <script src="lib/controls/colorpicker.min.js"></script> 
        <script src="lib/signalr/signalr.min.js"></script>
    </head>
    <body class="bg-cyan">
        <div>                        
            <div id="picker">
                <div id="color-picker"></div>
                <p>
                     <input id="color" type="text" value="none" readonly/>
                </p>                
            </div>
        </div>
       
        <!--Add script to update the page and send messages.-->
        <script type="text/javascript">
            var device = {
                "DeviceId": "67DJzL3xwLCT",
                "Name": "AmbientLigth",
                "Params": {
                    "Color": {
                        "A": 1,
                        "R": 0,
                        "G": 255,
                        "B": 255
                    }
                }
            };

            var colorRgba = {
                "a": 0,
                "r": 0,
                "g": 0,
                "b": 0
            };

            var colorPicker = null;

            // connect to SignalR hub
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/hubs/device")
                .build();

            connection.start()
                .then(() => connection.invoke("getDeviceStatusInitial", JSON.stringify(device))
                .catch(err => console.error(err.toString())));
                
            connection.on('deviceStatusReceived', (status) => {
                // The second is taking the actual device status
                device = JSON.parse(status);
                UpdateState(device);
            });

            connection.on('deviceStatusInitial', (status) => {
                if (status) {
                    // The first client reading the device status gets here inside
                    device = JSON.parse(status);

                    colorRgba.r = device.Params.Color.R;
                    colorRgba.g = device.Params.Color.G; 
                    colorRgba.b = device.Params.Color.B; 
                    colorRgba.a = device.Params.Color.A;

                    ReadColor(colorRgba);
                }
            });
            
            UpdateState = function (device) {
                // has to come...
            }; 

            ReadColor = function (colorRgba) {
                // if not coming from deviceStatusInitial
                if(colorRgba === null || colorRgba === undefined) {
                    colorRgba = colorPicker.getCurColorRgba();
                }

                // if still no object present
                if(colorRgba === null || colorRgba === undefined)
                    return;

                device.Params.Color.R = colorRgba.r;
                device.Params.Color.G = colorRgba.g; 
                device.Params.Color.B = colorRgba.b; 
                device.Params.Color.A = colorRgba.a;

                colorPicker.setAlpha(colorRgba.a);
                $("#color").val("rgba(" + colorRgba.r + ", " + colorRgba.g + ", " + colorRgba.b + ", " + colorRgba.a + ")");

                connection.invoke("deviceStatusSend", JSON.stringify(device))
                    .catch(err => console.error(err.toString()));

                connection.invoke("sendAmbientCommand", JSON.stringify(device))
                .catch(err => console.error(err.toString()));            
            };    

            $(document).ready(function () {
                colorPicker = new window.KellyColorPicker({
                    place: 'color-picker',
                    input: 'color',
                    inputFormat: 'rgba',
                    inputColor: true,
                    size: 360,
                    method: 'triangle',
                    alphaSlider: true
                });

                var onChange = function() {                  
                    ReadColor(null);
                };
                
                colorPicker.addUserEvent("change", onChange);
            });
        </script>
    </body>
}

