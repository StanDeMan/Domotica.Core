@page
@model Domotica.Core.Pages.AmbientLightModel
@{
    ViewData["Title"] = "Control hosting page";

    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

        <title>Ambient Light Control</title>

        <link href="lib/metro-ui/css/metro-all.css" rel="stylesheet" />
        <link href="css/site.css" rel="stylesheet" />
      
        <script src="lib/controls/iro.min.js"></script> 
        <script src="lib/signalr/signalr.min.js"></script>
    </head>
    <style>
        .container-middle {
            display: flex;
            justify-content: center;
        }
    </style>
    <body class="bg-cyan">
        <!-- With icon (font) -->
        <div class="container-middle bg-cyan fg-white">
            <div class="grid">
                <div class="row">
                    <div class="heading">
                        <span class="icon mif-switch mif-lg" id="switchStatusIcon"></span>
                        <strong><span class="title" id="BrightnessInTitle">Device - Brightness: 0%</span></strong>
                    </div>
                </div>
                <div class="row flex-align-end">
                    <div class="cell"></div>    <!-- some space -->
                </div>
                <div class="row flex-align-end">
                    <div class="cell">
                        <div id="picker"></div>
                    </div>
                </div>
            </div>
        </div>

        <!--Add script to update the page and send messages.-->
        <script src="lib/metro-ui/js/metro.js"></script>
        <script type="text/javascript">
            var device = {
                "DeviceId": "67DJzL3xwLCT",
                "Name": "Ambient Ligth",
                "NameId": "AmbientLigth",
                "Params": {
                    "Color": {
                        "A": 1,
                        "R": 0,
                        "G": 255,
                        "B": 255
                    }
                }
            };

            // color picker 
            var colorPicker = null;

            // color picker color format
            var colorRgba = { r: 0, g: 255, b: 255, a: 1 };

            const formatCaption = (deviceName, glow) => `${deviceName} - Brightness: ${glow}%`;

            // connect to SignalR hub
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/hubs/device")
                .build();

            connection.start()
                .then(() => connection.invoke("getDeviceStatusInitial", JSON.stringify(device), device.NameId)
                    .catch(err => console.error(err.toString())));

            connection.on('deviceStatusReceived',
                (status) => {
                    // The second is taking the actual device status
                    device = JSON.parse(status);

                    UpdateState(device);
                });

            connection.on('deviceStatusInitial',
                (status) => {
                    if (status) {
                        // The first client reading the device status gets here inside
                        device = JSON.parse(status);

                        SaveColor(device);
                        UpdateColor(colorRgba);
                    }
                });

            UpdateState = function(device) {
                SaveColor(device);
                UpdateColor(colorRgba);
            };

            SaveColor = function(device) {
                colorRgba.r = device.Params.Color.R;
                colorRgba.g = device.Params.Color.G;
                colorRgba.b = device.Params.Color.B;
                colorRgba.a = device.Params.Color.A;
            };

            UpdateColor = function(colorRgba) {
                // if still no object present
                if (colorRgba === null || colorRgba === undefined)
                    return;

                device.Params.Color.R = colorRgba.r;
                device.Params.Color.G = colorRgba.g;
                device.Params.Color.B = colorRgba.b;
                device.Params.Color.A = colorRgba.a;

                colorPicker.color.rgba = colorRgba;
                SwitchState(colorRgba.a);
            };

            SwitchState = function (glow) {
                 glow === 0
                    ? $("#switchStatusIcon").css("color", "red")
                    : $("#switchStatusIcon").css("color", "yellow");

                $("#BrightnessInTitle").text(formatCaption(device.Name, Math.round(glow * 100)));
            };   

            window.onbeforeunload = function () {
                console.log('Window gets closed');
            };

            $(document).ready(function() {
                colorPicker = new iro.ColorPicker("#picker",
                    {
                        width: 300,
                        color: colorRgba,
                        sliderType: 'alpha'
                    });

                function colorChangeCallback(color) {
                    UpdateColor(color.rgba);

                    connection.invoke("deviceStatusSend", JSON.stringify(device), device.NameId)
                        .catch(err => console.error(err.toString()));

                    connection.invoke("sendAmbientCommand", JSON.stringify(device))
                        .catch(err => console.error(err.toString()));
                };

                colorPicker.on("input:end", colorChangeCallback);
            });
        </script>
    </body>
}

